{"version":3,"sources":["components/Compose/index.tsx","components/Message/index.tsx","components/Toolbar/index.tsx","services/gpt.ts","services/message-builder.tsx","components/TypingIndicator/index.tsx","components/MessageList/index.tsx","components/Messenger/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Compose","props","useState","value","setValue","onSubmit","e","preventDefault","addMessage","className","type","placeholder","onChange","target","Message","data","isMine","startsSequence","endsSequence","showTimestamp","friendlyTimestamp","moment","timestamp","format","join","title","message","Toolbar","trimLines","additional","lines","hardMax","characterCount","_","takeRightWhile","line","length","trimLinesHelper","getPrompt","messages","start","map","m","author","getCompletion","prompt","headers","process","max_tokens","temperature","n","stop","axios","post","result","choices","text","GPTService","getAIResponse","MessageBuilderService","getMessages","myUserId","i","messageCount","tempMessages","previous","current","next","currentMoment","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","push","TypingIndicator","MY_USER_ID","MessageList","loading","setLoading","Date","getTime","setMessages","messagesEndRef","useRef","useEffect","scrollIntoView","behavior","addMyMessage","newMessage","withMine","response","responseMessage","ref","Messenger","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.391040af.chunk.js","sourcesContent":["import React, { FormEvent, useState } from 'react';\r\nimport './Compose.css';\r\n\r\ntype Props = {\r\n  addMessage: Function;\r\n}\r\nexport default function Compose(props: Props) {\r\n  const [value, setValue] = useState('')\r\n    const submit = (e: FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      props.addMessage(value);\r\n      setValue('');\r\n    }\r\n    const change = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setValue(e.target.value);\r\n    }\r\n    return (\r\n        <form onSubmit={submit} className=\"compose\">\r\n        <input\r\n          type=\"text\"\r\n          value={value}\r\n          className=\"compose-input\"\r\n          placeholder=\"Aa\"\r\n          onChange={change}\r\n        />\r\n        </form>\r\n    );\r\n}","import React from 'react';\r\nimport moment from 'moment';\r\nimport './Message.css';\r\n\r\nexport default function Message(props: any) {\r\n    const {\r\n      data,\r\n      isMine,\r\n      startsSequence,\r\n      endsSequence,\r\n      showTimestamp\r\n    } = props;\r\n\r\n    const friendlyTimestamp = moment(data.timestamp).format('LLLL');\r\n    return (\r\n      <div className={[\r\n        'message',\r\n        `${isMine ? 'mine' : ''}`,\r\n        `${startsSequence ? 'start' : ''}`,\r\n        `${endsSequence ? 'end' : ''}`\r\n      ].join(' ')}>\r\n        {\r\n          showTimestamp &&\r\n            <div className=\"timestamp\">\r\n              { friendlyTimestamp }\r\n            </div>\r\n        }\r\n\r\n        <div className=\"bubble-container\">\r\n          <div className=\"bubble\" title={friendlyTimestamp}>\r\n            { data.message }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n}","import React from \"react\";\r\nimport \"./Toolbar.css\";\r\n\r\ntype Props = {\r\n  title: string;\r\n};\r\nexport default function Toolbar(props: Props) {\r\n  const { title } = props;\r\n  return (\r\n    <div className=\"toolbar\">\r\n      <h1 className=\"toolbar-title\">{title}</h1>\r\n    </div>\r\n  );\r\n}\r\n","import { Message } from \"../components/MessageList\";\r\nimport axios from \"axios\";\r\nimport _ from 'lodash';\r\nconst GPTService = {\r\n    async getAIResponse(messages: Message[]): Promise<string> {\r\n        const prompt = getPrompt(messages);\r\n        const result = await getCompletion(prompt);\r\n        return result;\r\n    }\r\n};\r\n\r\nexport function trimLinesHelper(additional: number, lines: string[], hardMax: number): string[] {\r\n  let characterCount = additional;\r\n  const trimmedLines = _.takeRightWhile(lines, (line) => {\r\n    characterCount += line.length;\r\n    return characterCount <= hardMax;\r\n  });\r\n  return trimmedLines;\r\n}\r\n\r\nfunction trimLines(additional: number, lines: string[]): string[] {\r\n  // As the chat continues, there's a tradeoff:\r\n  // More lines == higher cost + better result\r\n  // 2048 - 300 is upper bound for tokens.\r\n  // We will assume 1 token ~= 4 characters and keep a window of ~500 tokens.\r\n  const maxPromptLength = 500 * 4;\r\n  // Davinci costs 0.06 per 1k tokens, so this is roughly 3 cents per completion at the upper end.\r\n  return trimLinesHelper(additional, lines, maxPromptLength);\r\n}\r\n\r\nfunction getPrompt(messages: Message[]): string {\r\n  const start = `The following is a conversation with an AI assistant. The assistant is helpful, creative, clever, and very friendly.\r\n\r\n`;\r\nconst additionalPrompt = \"AI:\";\r\n\r\n  const lines = messages.map((m) => `${m.author}: ${m.message}\\n`);\r\n  const trimmed = trimLines(start.length + additionalPrompt.length, lines);\r\n  const combinedLines = trimmed.join(\"\");\r\n  \r\n  return start + combinedLines + additionalPrompt;\r\n}\r\n\r\nconst RESPONSE_TOKEN_MAXIMUM = 300;\r\n\r\n// IMPORTANT: Please only use this for local testing. If you are deploying\r\n// your app onto the internet, you should route requests through your own\r\n// backend server to avoid exposing your OpenAI API key in your client\r\n// side code.\r\nasync function getCompletion(prompt: string): Promise<string> {\r\n  const url = \"https://api.openai.com/v1/engines/davinci/completions\"\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`\r\n  }\r\n\r\n  const data = {\r\n    prompt,\r\n    max_tokens: RESPONSE_TOKEN_MAXIMUM,\r\n    temperature: 0.9,\r\n    n: 1,\r\n    stop: ['AI:', `Human:`],\r\n  };\r\n  const result = await axios.post(\r\n    url,\r\n    data,\r\n    { headers: headers },\r\n  );\r\n  return result.data.choices[0].text;\r\n}\r\n\r\nexport default GPTService;\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport MessageComponent from \"../components/Message\";\r\nimport { Message } from \"../components/MessageList\";\r\n\r\nconst MessageBuilderService = {\r\n  getMessages(messages: Message[], myUserId: string) {\r\n    let i = 0;\r\n    let messageCount = messages.length;\r\n    let tempMessages = [];\r\n\r\n    while (i < messageCount) {\r\n      let previous = messages[i - 1];\r\n      let current = messages[i];\r\n      let next = messages[i + 1];\r\n      let isMine = current.author === myUserId;\r\n      let currentMoment = moment(current.timestamp);\r\n      let prevBySameAuthor = false;\r\n      let nextBySameAuthor = false;\r\n      let startsSequence = true;\r\n      let endsSequence = true;\r\n      let showTimestamp = true;\r\n\r\n      if (previous) {\r\n        let previousMoment = moment(previous.timestamp);\r\n        let previousDuration = moment.duration(\r\n          currentMoment.diff(previousMoment)\r\n        );\r\n        prevBySameAuthor = previous.author === current.author;\r\n\r\n        if (prevBySameAuthor && previousDuration.as(\"hours\") < 1) {\r\n          startsSequence = false;\r\n        }\r\n\r\n        if (previousDuration.as(\"hours\") < 1) {\r\n          showTimestamp = false;\r\n        }\r\n      }\r\n\r\n      if (next) {\r\n        let nextMoment = moment(next.timestamp);\r\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\r\n        nextBySameAuthor = next.author === current.author;\r\n\r\n        if (nextBySameAuthor && nextDuration.as(\"hours\") < 1) {\r\n          endsSequence = false;\r\n        }\r\n      }\r\n\r\n      tempMessages.push(\r\n        <MessageComponent\r\n          key={i}\r\n          isMine={isMine}\r\n          startsSequence={startsSequence}\r\n          endsSequence={endsSequence}\r\n          showTimestamp={showTimestamp}\r\n          data={current}\r\n        />\r\n      );\r\n      \r\n      i += 1;\r\n    }\r\n\r\n    return tempMessages;\r\n  },\r\n};\r\n\r\nexport default MessageBuilderService;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport \"./TypingIndicator.css\";\r\nimport \"../Message/Message.css\";\r\n\r\nexport default function TypingIndicator() {\r\n  return (\r\n    <div className=\"message end\">\r\n      <div className=\"bubble-container\">\r\n        <div className=\"bubble\">\r\n          <div className=\"typing-indicator\">\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport Compose from \"../Compose\";\r\nimport Message from \"../Message\";\r\nimport moment from \"moment\";\r\n\r\nimport \"./MessageList.css\";\r\nimport Toolbar from \"../Toolbar\";\r\nimport GPTService from \"../../services/gpt\";\r\nimport MessageBuilderService from \"../../services/message-builder\";\r\nimport TypingIndicator from \"../TypingIndicator\";\r\n\r\nconst MY_USER_ID = \"Human\";\r\n\r\nexport interface Message {\r\n  author: string;\r\n  message: string;\r\n  timestamp: number;\r\n}\r\nexport default function MessageList() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      author: \"AI\",\r\n      message:\r\n        `Hi! I'm a chatbot built with GPT-3.\r\n        What would you like to talk about?`,\r\n      timestamp: new Date().getTime(),\r\n    },\r\n  ] as Message[]);\r\n\r\n  // Stays scrolled to bottom.\r\n  const messagesEndRef = useRef(null);\r\n  useEffect(() => {\r\n    if (messagesEndRef) {\r\n      (messagesEndRef.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n  });\r\n  const addMyMessage = async (value: string) => {\r\n    const newMessage = {\r\n      author: MY_USER_ID,\r\n      message: value,\r\n      timestamp: new Date().getTime(),\r\n    };\r\n    \r\n    setMessages((previous) => [...previous, newMessage]);\r\n    setLoading(true);\r\n    const withMine = [...messages, newMessage];\r\n    const response = await GPTService.getAIResponse(withMine);\r\n    const responseMessage = {\r\n      author: \"AI\",\r\n      message: response,\r\n      timestamp: new Date().getTime(),\r\n    };\r\n    setMessages((previous) => [...previous, responseMessage]);\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"message-list\">\r\n      <Toolbar title=\"Chat with OpenAI\" />\r\n\r\n      <div className=\"message-list-container\">{MessageBuilderService.getMessages(messages, MY_USER_ID)}\r\n      {loading && <TypingIndicator />}\r\n      <div ref={messagesEndRef} />\r\n      </div>\r\n      \r\n\r\n      <Compose addMessage={addMyMessage} />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport MessageList from '../MessageList';\r\nimport './Messenger.css';\r\n\r\nexport default function Messenger() {\r\n    return (\r\n      <div className=\"messenger\">\r\n        <div className=\"scrollable content\">\r\n          <MessageList />\r\n        </div>\r\n      </div>\r\n    );\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Messenger from './components/Messenger';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <Messenger />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}